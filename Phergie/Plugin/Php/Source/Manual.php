<?php
/**
 * Phergie
 *
 * PHP version 5
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.
 * It is also available through the world-wide-web at this URL:
 * http://phergie.org/license
 *
 * @category  Phergie
 * @package   Phergie_Plugin_Php_Source_Manual
 * @author    Phergie Development Team <team@phergie.org>
 * @copyright 2008-2010 Phergie Development Team (http://phergie.org)
 * @license   http://phergie.org/license New BSD License
 * @link      http://pear.phergie.org/package/Phergie_Plugin_Php_Source_Manual
 */

/**
 * Base class for PHP manual sources. Provides shared functionality for
 * creating function references and extracting function references from HTML.
 *
 * @category Phergie
 * @package  Phergie_Plugin_Php_Source_Manual
 * @author   Phergie Development Team <team@phergie.org>
 * @license  http://phergie.org/license New BSD License
 * @link     http://pear.phergie.org/package/Phergie_Plugin_Php_Source_Manual
 */
abstract class Phergie_Plugin_Php_Source_Manual implements Phergie_Plugin_Php_Source
{
    /**
     * The PHP plugin this source is used by.
     * @var Phergie_Plugin_Php
     */
    protected $plugin = null;

    /**
     * Path to the manual. This can either be an absolute local path, or an URL
     * to an online manual.
     * @var string
     */
    protected $manualPath = '';

    /** **/

    public function __construct(Phergie_Plugin_Php $plugin)
    {
        $this->plugin = $plugin;
        $this->manualPath = rtrim($this->plugin->getConfig('php.manual.path', null), '/\\ ');
    }

    /**
     * Creates a reference to the function as used in the manual.
     * @param string $function The name of the function
     * @return string The reference by which the funciton is found in the manual
     */
    protected function _createFunctionReference($function)
    {
        $referece = trim($function, "\r\n\t ()");
        list($method, $classOrFunction) = array_reverse(explode('::', $referece, 2)) + array(null, 'function');
        $referece = $classOrFunction . '.' . trim($method, '_');
        $referece = str_replace('_', '-', $referece);
        $referece = strtolower($referece);

        return $referece;
    }

    /**
     * Strips tags from a string, removes new lines and reduces multiple spaces
     * to single ones.
     * @param string $value The string to clean
     * @return string The cleaned string
     */
    protected function _cleanString($value)
    {
        $cleaned = strip_tags($value);
        $cleaned = str_replace("\n", '', $cleaned);
        $cleaned = trim(preg_replace('/[\s]{2,}/i', " ", $cleaned));

        return $cleaned;
    }

    /**
     * Extracts function information from HTML generated by the PHP manual using
     * DOMXML.
     * @param string $html The HTML string to extract the reference from
     * @param string $reference The reference name for the function
     * @return array|null Associative array containing the function name, synopsis
     *                    and description or NULL if no results are found
     */
    protected function _extractFromHtml($html, $reference)
    {
        libxml_use_internal_errors(true);
        $domdoc = new DOMDocument('1.0', 'UTF-8');
        $domdoc->loadHTML($html);

        // Create a new XPath object for finding specific elements
        $xpath = new DOMXPath($domdoc);

        // Check to see if the information is contained within the HTML
        $functionElement = $xpath->evaluate('/html/body//div[@id="' . $reference .'"]');
        if (0 >= $functionElement->length) {
            return null;
        }

        // Find the function synopsis
        $synopsisElement = $xpath->evaluate('/html/body//div[@id="' . $reference .'"]//div[@class="methodsynopsis dc-description"]');
        if (0 >= $synopsisElement->length) {
            return null;
        }
        $synopsis = $this->_cleanString($domdoc->saveXML($synopsisElement->item(0)));

        // Find the function description
        $descriptionElement = $xpath->evaluate('/html/body//div[@id="' . $reference .'"]//div[@class="refnamediv"]//p[@class="refpurpose"]//span[@class="dc-title"]');
        if (0 >= $descriptionElement->length) {
            return null;
        }
        $description = $this->_cleanString($domdoc->saveXML($descriptionElement->item(0)));

        unset($domdoc);
        libxml_clear_errors();

        return array (
            'name' => $function,
            'synopsis' => $synopsis,
            'description' => $description,
        );
    }

}